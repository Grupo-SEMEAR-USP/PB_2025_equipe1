// Generated by gencpp from file robot_communication/velocity_comm.msg
// DO NOT EDIT!


#ifndef ROBOT_COMMUNICATION_MESSAGE_VELOCITY_COMM_H
#define ROBOT_COMMUNICATION_MESSAGE_VELOCITY_COMM_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace robot_communication
{
template <class ContainerAllocator>
struct velocity_comm_
{
  typedef velocity_comm_<ContainerAllocator> Type;

  velocity_comm_()
    : left_vel(0.0)
    , right_vel(0.0)  {
    }
  velocity_comm_(const ContainerAllocator& _alloc)
    : left_vel(0.0)
    , right_vel(0.0)  {
  (void)_alloc;
    }



   typedef double _left_vel_type;
  _left_vel_type left_vel;

   typedef double _right_vel_type;
  _right_vel_type right_vel;





  typedef boost::shared_ptr< ::robot_communication::velocity_comm_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::robot_communication::velocity_comm_<ContainerAllocator> const> ConstPtr;

}; // struct velocity_comm_

typedef ::robot_communication::velocity_comm_<std::allocator<void> > velocity_comm;

typedef boost::shared_ptr< ::robot_communication::velocity_comm > velocity_commPtr;
typedef boost::shared_ptr< ::robot_communication::velocity_comm const> velocity_commConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::robot_communication::velocity_comm_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::robot_communication::velocity_comm_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::robot_communication::velocity_comm_<ContainerAllocator1> & lhs, const ::robot_communication::velocity_comm_<ContainerAllocator2> & rhs)
{
  return lhs.left_vel == rhs.left_vel &&
    lhs.right_vel == rhs.right_vel;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::robot_communication::velocity_comm_<ContainerAllocator1> & lhs, const ::robot_communication::velocity_comm_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace robot_communication

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::robot_communication::velocity_comm_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::robot_communication::velocity_comm_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::robot_communication::velocity_comm_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::robot_communication::velocity_comm_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::robot_communication::velocity_comm_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::robot_communication::velocity_comm_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::robot_communication::velocity_comm_<ContainerAllocator> >
{
  static const char* value()
  {
    return "6276768e5df1d6b78b96e63931fb03fc";
  }

  static const char* value(const ::robot_communication::velocity_comm_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x6276768e5df1d6b7ULL;
  static const uint64_t static_value2 = 0x8b96e63931fb03fcULL;
};

template<class ContainerAllocator>
struct DataType< ::robot_communication::velocity_comm_<ContainerAllocator> >
{
  static const char* value()
  {
    return "robot_communication/velocity_comm";
  }

  static const char* value(const ::robot_communication::velocity_comm_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::robot_communication::velocity_comm_<ContainerAllocator> >
{
  static const char* value()
  {
    return "# velocity_comm.msg\n"
"float64 left_vel\n"
"float64 right_vel\n"
;
  }

  static const char* value(const ::robot_communication::velocity_comm_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::robot_communication::velocity_comm_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.left_vel);
      stream.next(m.right_vel);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct velocity_comm_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::robot_communication::velocity_comm_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::robot_communication::velocity_comm_<ContainerAllocator>& v)
  {
    s << indent << "left_vel: ";
    Printer<double>::stream(s, indent + "  ", v.left_vel);
    s << indent << "right_vel: ";
    Printer<double>::stream(s, indent + "  ", v.right_vel);
  }
};

} // namespace message_operations
} // namespace ros

#endif // ROBOT_COMMUNICATION_MESSAGE_VELOCITY_COMM_H
